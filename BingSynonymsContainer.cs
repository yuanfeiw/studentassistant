//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.551
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Notice: Use of the service proxies that accompany this notice is subject to
//            the terms and conditions of the license agreement located at
//            http://go.microsoft.com/fwlink/?LinkID=202740
//            If you do not agree to these terms you may not use this content.
namespace Student_Assistant
{
    using System;
    using System.ComponentModel;
    using System.Data.Services.Client;
    using System.Data.Services.Common;

    [DataServiceKey("Synonym")]
    public partial class GetSynonymsEntitySet : INotifyPropertyChanged
    {
        private String _Synonym;

        public String Synonym
        {
            get {
                return this._Synonym;
            }
            set {
                if (value != _Synonym)
                {
                    this._Synonym = value;
                    NotifyPropertyChanged("Synonym");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    public partial class BingSynonymsContainer : System.Data.Services.Client.DataServiceContext {
        
        public BingSynonymsContainer(Uri serviceRoot) : 
                base(serviceRoot) {
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Query">Query Sample Values : canon 600d</param>
        public DataServiceQuery<GetSynonymsEntitySet> GetSynonyms(String Query) {
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<GetSynonymsEntitySet> query;
            query = base.CreateQuery<GetSynonymsEntitySet>("GetSynonyms");
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            return query;
        }
    }
}
